// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:game_circle/common/user_collection.dart';
import 'package:game_circle/generated/json/user_collection_helper.dart';
import 'package:game_circle/common/post.dart';
import 'package:game_circle/generated/json/post_helper.dart';
import 'package:game_circle/common/comment.dart';
import 'package:game_circle/generated/json/comment_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case UserCollection:
				return userCollectionFromJson(data as UserCollection, json) as T;
			case GameCircle:
				return gameCircleFromJson(data as GameCircle, json) as T;
			case Post:
				return postFromJson(data as Post, json) as T;
			case Comment:
				return commentFromJson(data as Comment, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserCollection:
				return userCollectionToJson(data as UserCollection);
			case GameCircle:
				return gameCircleToJson(data as GameCircle);
			case Post:
				return postToJson(data as Post);
			case Comment:
				return commentToJson(data as Comment);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserCollection).toString()){
			return UserCollection().fromJson(json);
		}
		if(type == (GameCircle).toString()){
			return GameCircle().fromJson(json);
		}
		if(type == (Post).toString()){
			return Post().fromJson(json);
		}
		if(type == (Comment).toString()){
			return Comment().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserCollection>[] is M){
			return data.map<UserCollection>((e) => UserCollection().fromJson(e)).toList() as M;
		}
		if(<GameCircle>[] is M){
			return data.map<GameCircle>((e) => GameCircle().fromJson(e)).toList() as M;
		}
		if(<Post>[] is M){
			return data.map<Post>((e) => Post().fromJson(e)).toList() as M;
		}
		if(<Comment>[] is M){
			return data.map<Comment>((e) => Comment().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}